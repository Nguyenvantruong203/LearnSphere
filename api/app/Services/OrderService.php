<?php

namespace App\Services;

use App\Models\Order;
use App\Models\OrderItem;
use App\Models\Transaction;
use App\Models\Coupon;
use App\Models\CouponUsage;
use App\Models\UserCourse;
use Illuminate\Support\Facades\DB;
use App\Mail\InstructorNewEnrollmentMail;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Log;
use App\Models\User;
use App\Models\Notification;
use App\Models\ChatThread;
use App\Models\ChatParticipant;

class OrderService
{
    public function createOrder($userId, $items, $amount, $couponCode = null)
    {
        return DB::transaction(function () use ($userId, $items, $amount, $couponCode) {
            $order = new Order();
            $order->user_id = $userId;
            $order->total_price = $amount;
            $order->status = 'pending_payment';

            // X·ª≠ l√Ω coupon
            $discount = 0;
            if ($couponCode) {
                $coupon = Coupon::where('code', $couponCode)->where('is_active', true)->first();
                if ($coupon) {
                    $discount = $coupon->type === 'percent'
                        ? $amount * $coupon->value / 100
                        : $coupon->value;
                    $order->coupon_id = $coupon->id;
                    $order->discount_amount = $discount;
                }
            }

            $order->final_price = max(0, $amount - $discount);
            $order->save();

            // L∆∞u order items
            foreach ($items as $courseId) {
                OrderItem::create([
                    'order_id'          => $order->id,
                    'course_id'         => $courseId,
                    'price_at_purchase' => $amount, // gi·∫£ ƒë·ªãnh gi√° c·ªë ƒë·ªãnh, anh c√≥ th·ªÉ l·∫•y t·ª´ b·∫£ng courses
                ]);
            }

            return $order;
        });
    }

    public function markOrderPaid($txnRef, $params)
    {
        return DB::transaction(function () use ($txnRef, $params) {
            Log::info('MARK ORDER PAID CALLED', ['txnRef' => $txnRef]);

            $order = Order::with('items.course')->where('id', $txnRef)->first();
            if (!$order) {
                Log::warning('ORDER NOT FOUND', ['txnRef' => $txnRef]);
                return null;
            }

            $order->status = 'paid';
            $order->save();

            // üîπ Ghi nh·∫≠n giao d·ªãch thanh to√°n
            Transaction::create([
                'order_id'          => $order->id,
                'amount'            => $order->final_price,
                'status'            => 'succeeded',
                'provider'          => 'VNPAY',
                'transaction_code'  => uniqid('txn_'),
                'provider_txn_id'   => $params['vnp_TransactionNo'] ?? null,
                'provider_order_id' => $params['vnp_TxnRef'],
                'signature'         => $params['vnp_SecureHash'] ?? null,
                'raw_params'        => json_encode($params),
                'ipn_received_at'   => now(),
                'currency'          => 'VND',
            ]);

            // üîπ N·∫øu c√≥ coupon
            if ($order->coupon_id) {
                CouponUsage::create([
                    'coupon_id' => $order->coupon_id,
                    'user_id'   => $order->user_id,
                    'order_id'  => $order->id,
                    'used_at'   => now(),
                ]);

                Coupon::where('id', $order->coupon_id)->increment('used_count');
            }

            // üîπ G√°n kh√≥a h·ªçc cho user + join chat + g·ª≠i notify
            foreach ($order->items as $item) {
                $course = $item->course;
                $studentId = $order->user_id;
                $instructorId = $course->created_by;

                // ‚úÖ Ghi danh user v√†o kh√≥a h·ªçc
                UserCourse::updateOrCreate(
                    ['user_id' => $studentId, 'course_id' => $course->id],
                    ['enrolled_at' => now(), 'is_paid' => true]
                );

                /**
                 * ==================================================
                 * üî∏ PH·∫¶N M·ªöI: T·∫†O HO·∫∂C TH√äM CHAT GROUP + CHAT PRIVATE
                 * ==================================================
                 */

                // üß© (1) Chat nh√≥m kh√≥a h·ªçc
                $groupThread = ChatThread::firstOrCreate(
                    [
                        'course_id'   => $course->id,
                        'thread_type' => 'course_group',
                    ],
                    [
                        'is_group'   => true,
                        'title'      => $course->title,
                        'created_by' => $instructorId,
                    ]
                );

                ChatParticipant::firstOrCreate(
                    ['thread_id' => $groupThread->id, 'user_id' => $studentId],
                    ['role' => 'student', 'joined_at' => now()]
                );

                Log::info("‚úÖ User {$studentId} joined group chat {$groupThread->id} for course {$course->id}");

                // üß© (2) Chat ri√™ng v·ªõi gi·∫£ng vi√™n
                $privateThread = ChatThread::firstOrCreate(
                    [
                        'course_id'   => $course->id,
                        'thread_type' => 'private',
                        'is_group'    => false,
                    ],
                    [
                        'title'      => "Trao ƒë·ªïi v·ªõi gi·∫£ng vi√™n {$course->instructor->name}",
                        'created_by' => $studentId,
                    ]
                );

                // Th√™m h·ªçc vi√™n + gi·∫£ng vi√™n v√†o thread
                ChatParticipant::firstOrCreate(
                    ['thread_id' => $privateThread->id, 'user_id' => $studentId],
                    ['role' => 'student', 'joined_at' => now()]
                );

                ChatParticipant::firstOrCreate(
                    ['thread_id' => $privateThread->id, 'user_id' => $instructorId],
                    ['role' => 'instructor', 'joined_at' => now()]
                );

                Log::info("‚úÖ Created/Linked private chat between student {$studentId} and instructor {$instructorId}");

                /**
                 * ==================================================
                 * üîî G·ª≠i notification & email nh∆∞ c≈©
                 * ==================================================
                 */

                // üîî Notify instructor
                Notification::create([
                    'type'    => 'order',
                    'title'   => 'Kh√≥a h·ªçc m·ªõi ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω',
                    'message' => "Ng∆∞·ªùi d√πng #{$studentId} v·ª´a ƒëƒÉng k√Ω kh√≥a h·ªçc {$course->title}",
                    'data'    => json_encode([
                        'order_id'   => $order->id,
                        'course_id'  => $course->id,
                        'user_id'    => $studentId,
                    ]),
                ])->users()->attach([$instructorId]);

                // üîî Notify student
                Notification::create([
                    'type'    => 'course',
                    'title'   => 'Thanh to√°n th√†nh c√¥ng',
                    'message' => "B·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng kh√≥a h·ªçc {$course->title}",
                    'data'    => json_encode([
                        'order_id'  => $order->id,
                        'course_id' => $course->id,
                    ]),
                ])->users()->attach([$studentId]);

                // üìß G·ª≠i mail cho instructor
                $instructor = User::find($instructorId);
                if ($instructor && $instructor->email) {
                    Mail::to($instructor->email)->send(
                        new InstructorNewEnrollmentMail($order, $course)
                    );
                }
            }

            // üîî Notify admin
            $adminIds = User::where('role', 'admin')->pluck('id')->toArray();
            if ($adminIds) {
                Notification::create([
                    'type'    => 'order',
                    'title'   => 'ƒê∆°n h√†ng m·ªõi',
                    'message' => "ƒê∆°n h√†ng #{$order->id} ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng",
                    'data'    => json_encode([
                        'order_id' => $order->id,
                        'user_id'  => $order->user_id,
                    ]),
                ])->users()->attach($adminIds);
            }

            return $order;
        });
    }

    public function markOrderFailed($txnRef, $params)
    {
        $order = Order::where('id', $txnRef)->first();
        if ($order) {
            $order->status = 'canceled';
            $order->save();

            Transaction::create([
                'order_id'          => $order->id,
                'amount'            => $order->final_price,
                'status'            => 'failed',
                'provider'          => 'VNPAY',
                'transaction_code'  => uniqid('txn_'),
                'provider_txn_id'   => $params['vnp_TransactionNo'] ?? null,
                'provider_order_id' => $params['vnp_TxnRef'],
                'signature'         => $params['vnp_SecureHash'] ?? null,
                'raw_params'        => json_encode($params),
                'ipn_received_at'   => now(),
                'currency'          => 'VND',
            ]);
        }
        // ‚ö†Ô∏è Notify student
        Notification::create([
            'type'    => 'order',
            'title'   => 'Thanh to√°n th·∫•t b·∫°i',
            'message' => "ƒê∆°n h√†ng #{$order->id} c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.",
            'data'    => json_encode([
                'order_id' => $order->id,
                'user_id'  => $order->user_id,
            ]),
        ])->users()->attach([$order->user_id]);

        // ‚ö†Ô∏è Notify admin (ƒë·ªÉ theo d√µi l·ªói)
        $adminIds = User::where('role', 'admin')->pluck('id')->toArray();
        if ($adminIds) {
            Notification::create([
                'type'    => 'order',
                'title'   => 'Thanh to√°n th·∫•t b·∫°i',
                'message' => "ƒê∆°n h√†ng #{$order->id} v·ª´a b·ªã l·ªói thanh to√°n qua VNPAY.",
                'data'    => json_encode([
                    'order_id' => $order->id,
                    'user_id'  => $order->user_id,
                ]),
            ])->users()->attach($adminIds);
        }
    }
}
